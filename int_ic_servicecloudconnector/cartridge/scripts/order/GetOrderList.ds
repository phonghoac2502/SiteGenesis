/**
* Script file for use in the Script pipelet node.
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input orderList : ArrayList
*   @output orderList : Array
*   @output sortList : Array
*
*/

/**
 * @type {module:services/rest}
 */
var RestService = require('../services/rest');

/**
 * @type {dw/system/Logger}
 */
var LOGGER = require('dw/system/Logger');

/**
 * @type {dw.util.StringUtils}
 */
var StringUtils = require('dw/util/StringUtils');

function execute( args : PipelineDictionary ) : Number
{	
	if(session.isCustomerAuthenticated()) {
		var customer = session.getCustomer();		
		var salesforceOrderId = customer.profile.custom.salesforceAccountID;
		var sfccOrderList = getCustomerOrders(customer.profile.customerNo);
		var totalOrderList : ArrayList;
		if(salesforceOrderId) {						
			var orderJSON = {
				 "customerNo" :  customer.profile.customerNo,
				 "salesforceOrderId" : salesforceOrderId
				}; 
			var result = RestService.get(RestService.serviceIDs.get).call(RestService.servicePaths.get.orderlist, orderJSON);
			//var result = RestService.get(RestService.serviceIDs.get).call(StringUtils.format(RestService.servicePaths.get.orderlist, customer.profile.customerNo), orderJSON);			
			if(result.status == 'OK') {
				var sfdcOrderList : ArrayList = result.object.responseObj.results;				
				var totalOrderList = sfdcOrderList;
				var duplicate = false;
				for(var orderSFCC in sfccOrderList){
					for(var orderSFDC in sfdcOrderList) {
						if(sfccOrderList[orderSFCC]["order.orderNo"] == sfdcOrderList[orderSFDC]["order.orderNo"]){
							duplicate = true;
						}
					}					
					if(duplicate == false){
						sfccOrderList[orderSFCC]["order.creationDate"] = new Date(sfccOrderList[orderSFCC]["order.creationDate"]).toUTCString();
						totalOrderList.push(sfccOrderList[orderSFCC]);
					}					
				}
				totalOrderList.sort(function(order1,order2){
					var date1 : Date = new Date(order1["order.creationDate"]);
					var date2 : Date = new Date(order2["order.creationDate"]);
					return date1.valueOf() - date2.valueOf();				
				});					
				args.orderList = totalOrderList;				
				return PIPELET_NEXT;
			} else {
				LOGGER.debug('Cant get data from SFDC: {0}', result.errorMessage);
				args.orderList = sfccOrderList;	
				return PIPELET_NEXT;		
			}
		}else {			
			LOGGER.debug('Account No {} not sync on SFDC',customer.profile.customerNo);
			args.orderList = sfccOrderList;	
			return PIPELET_NEXT;			
		}
		args.orderList = totalOrderList;
		return PIPELET_NEXT;
	}
	response.redirect(dw.web.URLUtils.url('Login-Show'));	
	return PIPELET_NEXT;
}

function mappingOrderData(order : Order){
	var orderDetail: String = "{";
	orderDetail += '"order.orderNo" : "' + order.orderNo + '",';
	orderDetail += '"order.creationDate" : "' + order.creationDate + '",';
	orderDetail += '"order.status.displayValue" : "' + order.status.displayValue + '",';
	orderDetail += '"order.customer.profile.custom.salesforceAccountID" : "' + order.customer.profile.custom.salesforceAccountID + '",';
	orderDetail += '"order.custom.salesforceOrderId" : "' + order.custom.salesforceOrderId + '"';	
	orderDetail += "}";	
	return orderDetail;
}

function getCustomerOrders(cusNo : String){	
    var Orders : SeekableIterator =  dw.order.OrderMgr.queryOrders("customerNo = {0}", 'creationDate desc', cusNo);
    var sfccOrders : String = "[";
    var count = 0;
    while(Orders.hasNext()){
   	 var order : Order = Orders.next();    	 
   	 var orderDetail : Object = mappingOrderData(order);
   	 sfccOrders += orderDetail;
   	 if(count > Orders.count - 1) {
   	 	sfccOrders += ',';
   	 }
   	 count++;   	
    }
    sfccOrders += "]";
    return JSON.parse(sfccOrders);
}
